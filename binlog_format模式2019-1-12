1、ROW: 基于行的复制(row-based replication, RBR)：不记录每一条SQL语句的上下文信息，仅需记录哪条数据被修改了，修改成了什么样子了。
      优点：不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题。
      缺点：会产生大量的日志，尤其是修改操作的时会让日志暴涨。


      ROW模式： 记录的不是批量修改的SQL语句事件，而是每条记录被更改的SQL语句，因此，ROW模式的binlog日志文件会变得很大。

        update  userdb.user  set  school="tarena" where id<=10;

        update  userdb.user  set  school="tarena" where id=1;
        update  userdb.user  set  school="tarena" where id=2;
        ....
        ....
        update  userdb.user  set  school="tarena" where id=10;

      清楚的记录下每一行数据被修改的细节。不会出现某些特定情况下,存储过程或function，以及trigger的调用和触发器无法被正确复制的问题。


2、STATEMENT模式：基于SQL语句的复制(statement-based replication, SBR)，每一条会修改数据的sql语句会记录到binlog中。
      优点：不需要记录每一条SQL语句与每行的数据变化，这样binlog的日志也会比较少，减少了磁盘IO，提高性能。
      缺点：在某些情况下会导致master-slave中的数据不一致(如sleep()函数， last_insert_id()，以及user-defined functions(udf)等会出现问题)

    Statement 记录每一条修改数据的SQL语句
        （批量修改时，记录的不是单条SQL语句，而是批量修改的SQL语句事件 update  userdb.user  set  school="tarena" where id<=10;）


3、混合模式复制(mixed-based replication, MBR)：以上两种模式的混合使用，一般的复制使用STATEMENT模式保存binlog，
      对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择日志保存方式。


企业场景如何选择binlog的模式
1、 如果生产中使用MySQL的特殊功能相对少（存储过程、触发器、函数）。选择默认的语句模式，Statement Level。
2、 如果生产中使用MySQL的特殊功能较多的，可以选择Mixed模式。
3、 如果生产中使用MySQL的特殊功能较多，又希望数据最大化一致，此时最好Row level模式；但是要注意，该模式的binlog非常“沉重”。

update  a set name=bob  where id <=1000;
update  a set name=bob  where id=1000;
